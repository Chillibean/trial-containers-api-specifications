name: Release

on:
  push:
    branches:
      - main

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Retrieve Version
        id: version
        run: echo "value=$(node -pe 'require("./package.json").version')" >> $GITHUB_OUTPUT
      - name: Create Release
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs').promises;

            const { repo: { owner, repo }, sha } = context;

            try {
              const release = await github.rest.repos.createRelease({
                owner: owner,
                repo: repo,
                tag_name: '${{ steps.version.outputs.value }}',
                target_commitish: sha,
                name: '${{ steps.version.outputs.value }}',
                draft: true,
                generate_release_notes: true,
              });

              await github.rest.repos.uploadReleaseAsset({
                owner: owner,
                repo: repo,
                release_id: release.data.id,
                name: 'schema.json',
                data: await fs.readFile('./public/fullSchema.json'),
              });

              await github.rest.repos.updateRelease({
                owner: owner,
                repo: repo,
                release_id: release.data.id,
                draft: false,
              });
            } catch (error) {
              console.error(error);

              await github.rest.repos.deleteRelease({
                owner: owner,
                repo: repo,
                release_id: release.data.id,
              });

              core.setFailed('Failed to create a release');
            }
    outputs:
      version: ${{ steps.version.outputs.value }}

  delete-pre-releases:
    name: Detele Pre-Releases
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - name: Delete Releases
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs').promises;

            const { repo: { owner, repo }, sha } = context;

            try {
              const releases = await github.rest.repos.listReleases({
                owner: owner,
                repo: repo,
              });
              const preReleases = releases.data.filter((release) => release.name && release.name.includes('${{ needs.create-release.outputs.version }}' && release.prerelease));

              console.log('Found:', preReleases.map((release) => release.name));

              for (const release of preReleases) {
                await github.rest.repos.deleteRelease({
                  owner: owner,
                  repo: repo,
                  release_id: release.id,
                });
              }
            } catch (error) {
              console.error(error);
              core.setFailed('Failed to remove pre-releases');
            }

  trigger-client-sdk-package-generation:
    name: Trigger client SDK package generation
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - name: Trigger Workflow
        run: |
          curl -X POST https://api.github.com/repos/Chillibean/trial-containers-api-client-sdk/dispatches \
          -H 'Accept: application/vnd.github.everest-preview+json' \
          -u ${{ secrets.API_SPEC_PAT_TOKEN }} \
          --data '{"event_type": "trigger-release", "client_payload": { "version": "${{ needs.create-release.outputs.version }}" }}'
      - name: Get Pull Request Number
        id: pr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=$(gh api repos/${{ github.repository }}/commits/${{ github.sha }}/pulls --jq '.[0].number')

          if [ -z "$PR_NUMBER"]; then
            PR_NUMBER="none"
          fi

          echo "number=$PR_NUMBER" >> $GITHUB_OUTPUT
      - name: Pull Request Comment
        uses: actions/github-script@v7
        if: ${{ steps.pr.outputs.number != 'none' }}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const { repo: { owner, repo } } = context;

            try {
              await github.rest.issues.createComment({
                owner: owner,
                repo: repo,
                issue_number: ${{ steps.pr.outputs.number }},
                body: 'Version: ${{ needs.create-release.outputs.version }}',
              });
            } catch (error) {
              console.error(error);
            }

  publish-to-github-pages:
    name: Publish to GitHub Pages
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: ./package.json
      - name: Install
        run: npm ci
      - name: Build
        run: npm run build
      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist

  publish-to-swagger-hub:
    name: Publish to Swagger Hub
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Publish to Swagger Hub
        run: |
          curl -X POST "https://api.swaggerhub.com/apis/chillibean/trial-containers-api" \
          -H "Authorization: ${{ secrets.SWAGGER_API_KEY }}" \
          -H "Content-Type: application/json" \
          --data-binary "@./public/fullSchema.json"
      - name: Make API Private
        run: |
          curl -X PUT "https://api.swaggerhub.com/apis/chillibean/trial-containers-api/${{ needs.create-release.outputs.version }}/settings/private" \
          -H "Authorization: ${{ secrets.SWAGGER_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{"private": true}'
      - name: Publish API
        run: |
          curl -X PUT "https://api.swaggerhub.com/apis/chillibean/trial-containers-api/${{ needs.create-release.outputs.version }}/settings/lifecycle" \
          -H "Authorization: ${{ secrets.SWAGGER_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{"published": true}'
      - name: Set Default Version
        run: |
          curl -X PUT "https://api.swaggerhub.com/apis/chillibean/trial-containers-api/settings/default" \
          -H "Authorization: ${{ secrets.SWAGGER_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{"version": "${{ needs.create-release.outputs.version }}" }'
